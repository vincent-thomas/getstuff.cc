# Do a workflow where it lints and tests
name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions: 
  id-token: write
  contents: read

env:
  IMAGE_NAME: getstuff.cc

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 9.0.5
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          # Den är bra
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install
      - name: Lint
        run: pnpm check:ci
      - name: Test
        run: pnpm test:unit

  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v3
        with:
          version: 9.0.5
          run_install: false
      - run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          # Den är bra
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - run: pnpm install
      - run: SKIP_ENV_VALIDATION='1' pnpm build:app
      - uses: actions/upload-artifact@v4
        with:
          name: app-bundle
          path: |
            .next/static
            .next/standalone
            public
            Dockerfile
          retention-days: 1
          overwrite: true

  deploy:
    if: github.event_name == 'push' && github.ref_name == 'main'
    permissions:
      packages: write
      contents: read
    needs:
      - test
      - build
    name: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-bundle

      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      # - env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     REPOSITORY: getstuff.cc
      #     IMAGE_TAG: ${{ github.run_id }}
      #   run: |
      #     docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
      #     docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
